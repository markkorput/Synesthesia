// Generated by CoffeeScript 1.6.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  this.Motgraphs = (function() {
    function Motgraphs(opts) {
      this.updateCharts = __bind(this.updateCharts, this);
      var server,
        _this = this;
      this.options = opts;
      server = io.connect('/motgraphs');
      server.on('welcome', function(data) {
        return console.log('welcomed');
      });
      server.on('motionData', function(data) {
        return _this.update(data);
      });
      server.on('accelerationData', function(data) {
        return _this.accelerationUpdate(data);
      });
      server.on('audio', function(data) {
        return console.log("[warning] shouldn't be receiving audio");
      });
      this.alphas = [];
      this.betas = [];
      this.gammas = [];
      this.accelsX = [];
      this.accelsY = [];
      this.accelsZ = [];
      this.chart = new CanvasJS.Chart("chartContainer", {
        title: {
          text: "Orientation Data"
        },
        data: [
          {
            type: "line",
            dataPoints: this.alphas
          }, {
            type: "line",
            dataPoints: this.betas
          }, {
            type: "line",
            dataPoints: this.gammas
          }
        ]
      });
      this.chartAccel = new CanvasJS.Chart("accelContainer", {
        title: {
          text: "Acceleration Data"
        },
        data: [
          {
            type: "line",
            dataPoints: this.accelsX
          }, {
            type: "line",
            dataPoints: this.accelsY
          }, {
            type: "line",
            dataPoints: this.accelsZ
          }
        ]
      });
      this.startdate = new Date();
      setInterval(this.updateCharts, 100);
      console.log('[debug] Motgraphs initialized');
    }

    Motgraphs.prototype.update = function(data) {
      if (!this.lastData) {
        console.log('Motiondata:', data);
      }
      return this.lastData = data;
    };

    Motgraphs.prototype.accelerationUpdate = function(data) {
      if (!this.lastAccelData) {
        console.log('Acceleration data:', data);
      }
      return this.lastAccelData = data;
    };

    Motgraphs.prototype.updateCharts = function() {
      var data, x;
      x = ((new Date().getTime()) - this.startdate.getTime()) / 1000;
      data = this.lastData || {
        alpha: 0,
        beta: 0,
        gamma: 0
      };
      this.alphas.push({
        x: x,
        y: data.alpha
      });
      this.betas.push({
        x: x,
        y: data.beta
      });
      this.gammas.push({
        x: x,
        y: data.gamma
      });
      while (this.alphas.length > 150) {
        this.alphas.shift();
      }
      while (this.betas.length > 150) {
        this.betas.shift();
      }
      while (this.gammas.length > 150) {
        this.gammas.shift();
      }
      this.chart.render();
      data = this.lastAccelData || {
        accelerationIncludingGravity: {
          x: 0,
          y: 0,
          z: 0
        }
      };
      this.accelsX.push({
        x: x,
        y: data.accelerationIncludingGravity.x
      });
      this.accelsY.push({
        x: x,
        y: data.accelerationIncludingGravity.y
      });
      this.accelsZ.push({
        x: x,
        y: data.accelerationIncludingGravity.z
      });
      while (this.accelsX.length > 150) {
        this.accelsX.shift();
      }
      while (this.accelsY.length > 150) {
        this.accelsY.shift();
      }
      while (this.accelsZ.length > 150) {
        this.accelsZ.shift();
      }
      return this.chartAccel.render();
    };

    return Motgraphs;

  })();

  $(document).ready(function() {
    return window.motgraphs = new Motgraphs();
  });

}).call(this);
