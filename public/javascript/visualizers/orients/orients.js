// Generated by CoffeeScript 1.6.3
(function() {
  var ClientOrient, Orients;

  $(document).ready(function() {
    return window.orients = new Orients();
  });

  Orients = (function() {
    function Orients(opts) {
      var server,
        _this = this;
      this.options = opts || {};
      server = io.connect('/motgraphs');
      server.on('welcome', function(data) {
        return console.log("Orients welcomed", data);
      });
      server.on('motionData', function(data) {
        return _this.processMotionData(data);
      });
      this.clients = new Backbone.Collection();
      this.initScene();
      this.animate();
    }

    Orients.prototype.initScene = function() {
      this.camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 1000);
      this.renderer = new THREE.WebGLRenderer();
      this._resize();
      $(window).resize(this._resize);
      document.body.appendChild(this.renderer.domElement);
      this.scene = new THREE.Scene();
      this.camera.position.set(0, 0, 300);
      this.camera.lookAt(this.scene.position);
      this.light = new THREE.PointLight(0xFF0000);
      this.light.position.x = 10;
      this.light.position.y = 50;
      this.light.position.copy(this.camera.position);
      this.light.position.x += 3;
      this.light.position.y += 3;
      return this.scene.add(this.light);
    };

    Orients.prototype._resize = function(event) {
      if (this.camera) {
        this.camera.aspect = window.innerWidth / window.innerHeight;
        this.camera.updateProjectionMatrix();
      }
      if (this.renderer) {
        return this.renderer.setSize(window.innerWidth, window.innerHeight);
      }
    };

    Orients.prototype.animate = function() {
      var _this = this;
      requestAnimationFrame(function() {
        return _this.animate();
      });
      this.update(0.032);
      return this.draw();
    };

    Orients.prototype.update = function(dt) {};

    Orients.prototype.draw = function() {
      return this.renderer.render(this.scene, this.camera);
    };

    Orients.prototype.processMotionData = function(data) {
      var clientOrient, mesh, model, vec3;
      vec3 = new THREE.Vector3(data.beta / 180 * Math.PI, data.alpha / 180 * Math.PI, -data.gamma / 180 * Math.PI);
      if (model = this.clients.get(data.cid)) {
        return model.set({
          orientation: vec3
        });
      } else {
        model = new Backbone.Model({
          id: data.cid,
          orientation: vec3
        });
        this.clients.add(model);
        clientOrient = new ClientOrient({
          model: model
        });
        mesh = clientOrient.mesh;
        mesh.position.set(-50 + Math.random() * 100, -50 + Math.random() * 100, 0);
        return this.scene.add(mesh);
      }
    };

    return Orients;

  })();

  ClientOrient = (function() {
    function ClientOrient(opts) {
      this.options = opts || {};
      this.geometry = new THREE.CubeGeometry(10, 20, 2);
      this.material = new THREE.MeshLambertMaterial({
        color: 0xFF0000
      });
      this.mesh = this._generateMesh();
      this.model = opts.model;
      if (this.model) {
        this.model.on('change:orientation', this.update, this);
        this.update();
      }
    }

    ClientOrient.prototype._generateMesh = function() {
      var mesh;
      mesh = new THREE.Mesh(this.geometry, this.material);
      return mesh;
    };

    ClientOrient.prototype.update = function() {
      if (this.model) {
        return this.mesh.rotation.fromArray(this.model.get('orientation').toArray());
      }
    };

    return ClientOrient;

  })();

}).call(this);
