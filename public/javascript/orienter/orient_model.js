// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  this.OrientModel = (function(_super) {
    __extends(OrientModel, _super);

    function OrientModel() {
      this._updateAudio = __bind(this._updateAudio, this);
      this._updateDistance = __bind(this._updateDistance, this);
      _ref = OrientModel.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    OrientModel.prototype.defaults = {
      audioEnabled: false,
      tempo: false,
      gain: false,
      blink: false,
      radar: false,
      targetOrientationValue: 0,
      orientationValue: 0,
      visualize: true
    };

    OrientModel.prototype.initialize = function() {
      this.on('change:targetOrientationValue', this._updateDistance);
      this.on('change:orientationValue', this._updateDistance);
      this.on('change:tempo', this._updateAudio);
      this.on('change:gain', this._updateAudio);
      this.set({
        lastOrientationTime: new Date().getTime()
      });
      return this.on('change:orientation', function(model, val, obj) {
        return model.set({
          lastOrientationTime: new Date().getTime()
        });
      });
    };

    OrientModel.prototype._updateDistance = function() {
      var current, dist, target;
      target = this.get('targetOrientationValue');
      current = this.get('orientationValue');
      if (target === void 0 || current === void 0) {
        return;
      }
      if (target > 180) {
        target = 180 - (target - 180);
      }
      if (current > 180) {
        current = 180 - (current - 180);
      }
      dist = target - current;
      return this.set({
        orientationDistance: dist
      });
    };

    OrientModel.prototype._updateAudio = function() {
      var audioEnabled;
      audioEnabled = this.get('tempo') === true || this.get('gain') === true;
      return this.set({
        audioEnabled: audioEnabled
      });
    };

    return OrientModel;

  })(Backbone.Model);

}).call(this);
