// Generated by CoffeeScript 1.6.3
(function() {
  var Orienter,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  $(document).ready(function() {
    return window.orienter = new Orienter();
  });

  Orienter = (function() {
    function Orienter(opts) {
      this.onDeviceAccel = __bind(this.onDeviceAccel, this);
      this.onDeviceMotion = __bind(this.onDeviceMotion, this);
      var _this = this;
      this.options = opts || {};
      this.server = io.connect('/orienter');
      this.$h1 = $('h1');
      this.session_el = $('#session_id');
      this.orientation_el = $('#orientation');
      this.acceleration_el = $('#acceleration');
      this.target_el = $('#target');
      this.current_el = $('#current');
      this.server.on('sessionId', function(data) {
        _this.session_id = data;
        return _this.session_el.text('Session ID: ' + data);
      });
      this.server.on('welcome', function(data) {
        if (data.tracking) {
          return _this.setupTracking();
        } else {
          return _this.$h1.text('Connected. Motion tracking off.');
        }
      });
      this.server.on('reset', function() {
        return _this.setupTracking(false);
      });
      this.server.on('toggleMotion', function(data) {
        if (data.motion) {
          return _this.setupTracking();
        } else {
          return _this.setupTracking(false);
        }
      });
      this.server.on('targetOrientationValue', function(data) {
        if (data.sessionId !== _this.session_id) {
          return;
        }
        return _this.target_el.text('Target: ' + data.value);
      });
    }

    Orienter.prototype.setupTracking = function(_setup) {
      this.setupMotionListener(_setup);
      this.setupAccelListener(_setup);
      if (_setup === true || _setup === void 0) {
        return this.$h1.text('Now tracking motion.');
      } else {
        return this.$h1.text('Motion tracking off.');
      }
    };

    Orienter.prototype.setupMotionListener = function(_setup) {
      if (_setup === true || _setup === void 0) {
        return window.addEventListener('deviceorientation', this.onDeviceMotion);
      } else {
        return window.removeEventListener('deviceorientation', this.onDeviceMotion);
      }
    };

    Orienter.prototype.setupAccelListener = function(_setup) {
      if (_setup === true || _setup === void 0) {
        return window.addEventListener('devicemotion', this.onDeviceAccel);
      } else {
        return window.removeEventListener('devicemotion', this.onDeviceAccel);
      }
    };

    Orienter.prototype.onDeviceMotion = function(event) {
      this.server.emit('motionData', {
        alpha: event.alpha,
        beta: event.beta,
        gamma: event.gamma
      });
      this.orientation_el.text('Orientation: ' + [event.alpha, event.beta, event.gamma].join(', '));
      return this.current_el.text('Current: ' + Math.floor(event.alpha));
    };

    Orienter.prototype.onDeviceAccel = function(event) {
      this.server.emit('accelerationData', {
        rotationRate: event.rotationRate,
        acceleration: event.acceleration,
        accelerationIncludingGravity: event.accelerationIncludingGravity
      });
      return this.acceleration_el.text('Acceleration: ' + [event.accelerationIncludingGravity.x, event.accelerationIncludingGravity.y, event.accelerationIncludingGravity.z].join(', '));
    };

    return Orienter;

  })();

}).call(this);
